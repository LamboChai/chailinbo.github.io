<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Leetcode23:Merge k Sorted Lists]]></title>
      <url>/2017/09/24/leetcode23/</url>
      <content type="html"><![CDATA[<h1 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h1><p>Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.<br>把K个已经排序的链表合并到一起并返回它的链表头，分析并描述它的复杂度。</p>
<h1 id="2-解题思路"><a href="#2-解题思路" class="headerlink" title="2. 解题思路"></a>2. 解题思路</h1><p>这道题的难度是hard。这道题的解题思路有三种：</p>
<ol>
<li>首先合并前两个链表得到一个链表，然后再和第三个合并，然后再和第四个合并，依次合并下去，直到最后得到一个链表。我们计算一下复杂度。<blockquote>
<p>1、2合并，遍历2n个节点<br>1,2结果和3合并，遍历3n个节点<br>1,2,3结果和4合并，遍历4n个节点<br>1,2,3,..,k-1结果和k合并，遍历kn个节点<br>总共遍历的节点数目为n(2+3+…+k) = n<em>(k^2+k-2)/2, 因此时间复杂度是O(n</em>(k^2+k-2)/2) = O(nk^2)。</p>
</blockquote>
</li>
</ol>
<ol>
<li><p>利用分治的思想，先把m个链表的合并分成m/2个双链表的合并，然后一次递减直到只有最后的一个或者两个链表。仔细想想这个过程是不是二分的逆过程。这个可以使用递归来实现，同样的思路在合并两个链表里也使用过。因此算法复杂度为T(k) = 2T(k/2) + O(nk),推导得到算法复杂度为O（nklogk）。</p>
<blockquote>
<p>1、3合并，合并结果放到1的位置<br>2、4合并，合并结果放到2的位置<br>再把1、2合并（相当于原来的13 和 24合并）</p>
</blockquote>
<ol>
<li>维护一个k个大小的最小堆，初始化堆中元素为每个链表的头结点，每次从堆中选择最小的元素加入到结果链表，再选择该最小元素所在链表的下一个节点加入到堆中。这样当堆为空时，所有链表的节点都已经加入了结果链表。元素加入堆中的复杂度为O（longk），总共有kn个元素加入堆中，因此，复杂度也和算法2一样是O（nklogk）。<h1 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h1></li>
</ol>
</li>
<li><p>依次合并</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"> <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeKLists</span><span class="params">(ListNode[] lists)</span> </span>&#123;</div><div class="line">	 <span class="keyword">int</span> n = lists.length;</div><div class="line">	</div><div class="line">	 <span class="keyword">if</span>(n==<span class="number">0</span> || lists==<span class="keyword">null</span>)</div><div class="line">		 <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">     <span class="comment">//if(n==1)</span></div><div class="line">       <span class="comment">//  return lists[0];       </span></div><div class="line">		 <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) &#123;</div><div class="line">			 lists[<span class="number">0</span>] = mergeTwoLists(lists[<span class="number">0</span>],lists[i]);</div><div class="line">		 &#125;</div><div class="line">		 n = k;</div><div class="line">	 &#125;</div><div class="line">	 <span class="keyword">return</span> lists[<span class="number">0</span>];</div><div class="line"> &#125;</div><div class="line">     <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(l1==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> l2;</div><div class="line">        <span class="keyword">if</span>(l2==<span class="keyword">null</span>)</div><div class="line">        	<span class="keyword">return</span> l1;</div><div class="line">        ListNode head = <span class="keyword">null</span>;</div><div class="line">       </div><div class="line">        ListNode head_c = l1.val&gt;l2.val?l2:l1;</div><div class="line">        head = head_c;</div><div class="line">        </div><div class="line">        <span class="keyword">while</span>(l1 !=<span class="keyword">null</span> &amp;&amp; l2!=<span class="keyword">null</span>) &#123;</div><div class="line">        	<span class="keyword">if</span>(l1.val&gt;l2.val) &#123;</div><div class="line">        		head.next = l2;</div><div class="line">        		l2 = l2.next;</div><div class="line">        	&#125;</div><div class="line">        	<span class="keyword">else</span> &#123;</div><div class="line">        		head.next = l1;</div><div class="line">        		l1 = l1.next;</div><div class="line">        	&#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(l1==<span class="keyword">null</span>) &#123;</div><div class="line">        	head.next = l2;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">        	head.next = l1;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> head_c.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>分支思想、两两合并</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Definition for singly-linked list.</span></div><div class="line"><span class="comment"> * public class ListNode &#123;</span></div><div class="line"><span class="comment"> *     int val;</span></div><div class="line"><span class="comment"> *     ListNode next;</span></div><div class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></div><div class="line"><span class="comment"> * &#125;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"> <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeKLists</span><span class="params">(ListNode[] lists)</span> </span>&#123;</div><div class="line">	 <span class="keyword">int</span> n = lists.length;</div><div class="line">	</div><div class="line">	 <span class="keyword">if</span>(n==<span class="number">0</span> || lists==<span class="keyword">null</span>)</div><div class="line">		 <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">     <span class="comment">//if(n==1)</span></div><div class="line">       <span class="comment">//  return lists[0];</span></div><div class="line">	 <span class="keyword">while</span>(n&gt;<span class="number">1</span>) &#123;</div><div class="line">		 <span class="keyword">int</span> k = (n+<span class="number">1</span>)/<span class="number">2</span>;</div><div class="line">         </div><div class="line">		 <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++) &#123;<span class="comment">//注意这里i的取值范围，因为n存在奇偶两种情况</span></div><div class="line">			 lists[i] = mergeTwoLists1(lists[i],lists[i+k]);</div><div class="line">		 &#125;</div><div class="line">		 n = k;</div><div class="line">	 &#125;</div><div class="line">	 <span class="keyword">return</span> lists[<span class="number">0</span>];</div><div class="line"> &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists1</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(l1==<span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> l2;</div><div class="line">        <span class="keyword">if</span>(l2==<span class="keyword">null</span>)</div><div class="line">        	<span class="keyword">return</span> l1;</div><div class="line">       <span class="keyword">if</span>(l1.val&lt;l2.val) &#123;</div><div class="line">    	   l1.next = mergeTwoLists1(l1.next,l2);</div><div class="line">    	   <span class="keyword">return</span> l1;</div><div class="line">       &#125;<span class="keyword">else</span> &#123;</div><div class="line">    	   l2.next = mergeTwoLists1(l2.next,l1);</div><div class="line">    	   <span class="keyword">return</span> l2;  </div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>维护最小堆</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeKLists</span><span class="params">(List&lt;ListNode&gt; lists)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (lists==<span class="keyword">null</span>||lists.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        </div><div class="line">        PriorityQueue&lt;ListNode&gt; queue= <span class="keyword">new</span> PriorityQueue&lt;ListNode&gt;(lists.size(),<span class="keyword">new</span> Comparator&lt;ListNode&gt;()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(ListNode o1,ListNode o2)</span></span>&#123;</div><div class="line">                <span class="keyword">if</span> (o1.val&lt;o2.val)</div><div class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (o1.val==o2.val)</div><div class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">                <span class="keyword">else</span> </div><div class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);<span class="comment">//建堆并重写compare函数</span></div><div class="line">        </div><div class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</div><div class="line">        ListNode tail=dummy;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (ListNode node:lists)</div><div class="line">            <span class="keyword">if</span> (node!=<span class="keyword">null</span>)</div><div class="line">                queue.add(node);</div><div class="line">            </div><div class="line">        <span class="keyword">while</span> (!queue.isEmpty())&#123;</div><div class="line">            tail.next=queue.poll();<span class="comment">//取出堆中的最小值</span></div><div class="line">            tail=tail.next;</div><div class="line">            <span class="comment">//并把所在链表的下一个放入堆中</span></div><div class="line">            <span class="keyword">if</span> (tail.next!=<span class="keyword">null</span>)</div><div class="line">                queue.add(tail.next);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> dummy.next;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> leetcode, java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 25:Reverse Nodes in k-Group]]></title>
      <url>/2017/09/23/leetcode25/</url>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>+<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<ul>
<li><a href="#1题目描述">1.题目描述</a></li>
<li><a href="#2解题思路">2.解题思路</a></li>
<li><a href="#3代码实现">3.代码实现</a></li>
</ul>
<h1 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h1><p>Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.<br>k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.<br>You may not alter the values in the nodes, only nodes itself may be changed.<br>Only constant memory is allowed.<br>For example,<br>Given this linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5<br>For k = 2, you should return: 2-&gt;1-&gt;4-&gt;3-&gt;5<br>For k = 3, you should return: 3-&gt;2-&gt;1-&gt;4-&gt;5<br>题目翻译：<br>给定一个链表，每次翻转链表中的K个元素，最后返回翻转后的链表。k是一个小于等于链表长度的整数，如果链表当中的节点数不是k的整数倍，那么除了可以翻转的那部分，剩余的不做处理。不允许改变节点的数值，只能对节点本身进行操作，同时要求常数级的空间开销。<br>举例说明：<br>给定一个链表：1-&gt;2-&gt;3-&gt;4-&gt;5<br>当k=2时，2-&gt;1-&gt;4-&gt;3-&gt;5<br>当k=3时，3-&gt;2-&gt;1-&gt;4-&gt;5 </p>
<h1 id="2-解题思路"><a href="#2-解题思路" class="headerlink" title="2.解题思路"></a>2.解题思路</h1><p>这道题的难度是hard,但是解题思路很清晰：每次取出k个节点进行翻转，注意保持好链表的性质，最后少于k个的节点不做处理。那么它的难点在哪里？ 就是你怎么使用常数级的空间开销来实现一个链表的反转，同时保持链表单向链接的性质！！此处是重点：++在数据结构的单链表部分，单链表的插入有头插法和尾插法两种，这里就是利用头插法实现单链表的翻转。++ 何为头插法，请点击<a href="http://www.nowamagic.net/librarys/veda/detail/2241" target="_blank" rel="external">这里</a>，看详细的解析。<br>在处理链表问题的时候，一般我们会给链表加上头指针，注意和头结点区别。因为头指针在处理边界问题的时候比较方便，这道题目也用到这一点，同时需要一些指针来保存要翻转的部分链表开始和结束的位置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;5</div><div class="line"> |           |</div><div class="line">pre         next</div><div class="line"></div><div class="line">-1-&gt;3-&gt;2-&gt;1-&gt;4-&gt;5</div><div class="line">          |  |</div><div class="line">         pre next</div></pre></td></tr></table></figure></p>
<h1 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h1><ol>
<li><p>单独实现头插法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Definition for singly-linked list.</span></div><div class="line"><span class="comment"> * public class ListNode &#123;</span></div><div class="line"><span class="comment"> *     int val;</span></div><div class="line"><span class="comment"> *     ListNode next;</span></div><div class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></div><div class="line"><span class="comment"> * &#125;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">     <span class="function"><span class="keyword">public</span> ListNode <span class="title">reversek</span><span class="params">(ListNode pre,ListNode end)</span> </span>&#123;</div><div class="line">    	ListNode l1 = pre.next;<span class="comment">//pre起到头指针的作用</span></div><div class="line">    	ListNode l2 = l1.next;</div><div class="line">    	<span class="keyword">while</span>(l2 != end) &#123;</div><div class="line">    		<span class="comment">//pre.next = l2.next;</span></div><div class="line">    	    l1.next = l2.next;<span class="comment">//取出l2</span></div><div class="line">    		l2.next = pre.next;<span class="comment">//把l2放在头结点的位置</span></div><div class="line">    		pre.next = l2;<span class="comment">//保持链表性质</span></div><div class="line">    		l2 = l1.next;<span class="comment">//更新l2位置</span></div><div class="line">    		</div><div class="line">    	&#125;</div><div class="line">    	<span class="keyword">return</span> l1;</div><div class="line">    &#125;</div><div class="line">     <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseKGroup</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;   </div><div class="line">    	<span class="keyword">if</span>(head==<span class="keyword">null</span>)</div><div class="line">    		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    	<span class="keyword">if</span>(k==<span class="number">0</span>||k==<span class="number">1</span>||head.next==<span class="keyword">null</span>)<span class="comment">//特殊情况的判断</span></div><div class="line">        	<span class="keyword">return</span> head;</div><div class="line">    	ListNode dum = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);<span class="comment">//java里不知道怎么叫，头指针？</span></div><div class="line">    	dum.next = head;</div><div class="line">    	ListNode pre = dum,cur = head;</div><div class="line">    	<span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">    	<span class="keyword">while</span>(cur!=<span class="keyword">null</span>) &#123;</div><div class="line">       ListNode p = pre.next;</div><div class="line">        count = k;</div><div class="line">        <span class="keyword">while</span>(count!=<span class="number">0</span> &amp;&amp; p!=<span class="keyword">null</span>)&#123;</div><div class="line">            count--;</div><div class="line">            p = p.next;</div><div class="line">        &#125;<span class="comment">//每次while循环的步长是k</span></div><div class="line">            <span class="keyword">if</span>(count&gt;<span class="number">0</span>)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</div><div class="line">              pre = reversek( pre,p);<span class="comment">//头插法处理</span></div><div class="line">              cur = pre.next;<span class="comment">//下一次翻转开始位置</span></div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line">         <span class="keyword">return</span> dum.next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>一个函数搞定</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Definition for singly-linked list.</span></div><div class="line"><span class="comment"> * public class ListNode &#123;</span></div><div class="line"><span class="comment"> *     int val;</span></div><div class="line"><span class="comment"> *     ListNode next;</span></div><div class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></div><div class="line"><span class="comment"> * &#125;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseKGroup</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;   </div><div class="line">    	<span class="keyword">if</span>(head==<span class="keyword">null</span>)</div><div class="line">    		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    	<span class="keyword">if</span>(k==<span class="number">0</span>||k==<span class="number">1</span>||head.next==<span class="keyword">null</span>)</div><div class="line">        	<span class="keyword">return</span> head;</div><div class="line">    	ListNode dum = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</div><div class="line">    	dum.next = head;</div><div class="line">    	ListNode pre = dum,cur =head;</div><div class="line">    	<span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">    	<span class="keyword">while</span>(cur!=<span class="keyword">null</span>)&#123;<span class="comment">//遍历链表，获得长度</span></div><div class="line">            count++;</div><div class="line">            cur= cur.next;</div><div class="line">        &#125;</div><div class="line">        System.out.println(count);</div><div class="line">        <span class="keyword">while</span>(count&gt;=k)&#123;<span class="comment">//头插法，注意是&gt;=</span></div><div class="line">            cur = pre.next;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;k-<span class="number">1</span>;i++)&#123;<span class="comment">//注意这里循环的次数是k-1次，是个坑</span></div><div class="line">                ListNode t = cur.next;</div><div class="line">                cur.next  = t.next;</div><div class="line">                t.next = pre.next;</div><div class="line">                pre.next = t;</div><div class="line">            &#125;</div><div class="line">            pre = cur;</div><div class="line">            count -=k;</div><div class="line">        &#125;</div><div class="line">         <span class="keyword">return</span> dum.next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>未通过代码，突发奇想使用Stack压栈和出栈的过程就完成了翻转，思路更简单，但是想想也不太可能当k很大的时候，肯定不符合条件，不通过的原因是超时，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Definition for singly-linked list.</span></div><div class="line"><span class="comment"> * public class ListNode &#123;</span></div><div class="line"><span class="comment"> *     int val;</span></div><div class="line"><span class="comment"> *     ListNode next;</span></div><div class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></div><div class="line"><span class="comment"> * &#125;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseKGroup</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;   </div><div class="line">    	<span class="keyword">if</span>(head==<span class="keyword">null</span>)</div><div class="line">    		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    	<span class="comment">//if(k==0||k==1||head.next==null)</span></div><div class="line">        <span class="comment">//	return head;</span></div><div class="line">    	ListNode dum = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</div><div class="line">    	dum.next = head;</div><div class="line">    	ListNode pre = dum,cur =pre;</div><div class="line">    	<span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">    	Stack&lt;ListNode&gt; tmp = <span class="keyword">new</span> Stack&lt;ListNode&gt;();</div><div class="line">         <span class="keyword">while</span>(cur!=<span class="keyword">null</span>)&#123;</div><div class="line">            count =k;</div><div class="line">             <span class="keyword">while</span>(count!=<span class="number">0</span> &amp;&amp; cur != <span class="keyword">null</span>)&#123;</div><div class="line">                 cur=cur.next;</div><div class="line">                 count--;</div><div class="line">                 tmp.push(cur);</div><div class="line">             &#125;</div><div class="line">             <span class="keyword">if</span>(count&gt;<span class="number">0</span>)</div><div class="line">                 <span class="keyword">break</span>;</div><div class="line">             <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</div><div class="line">                 <span class="keyword">while</span>(!tmp.empty())&#123;</div><div class="line">                     pre.next = tmp.pop();</div><div class="line">                     pre = pre.next;</div><div class="line">                 &#125;</div><div class="line">             &#125;</div><div class="line">             cur = pre;</div><div class="line">         &#125;</div><div class="line">        </div><div class="line">         <span class="keyword">return</span> dum.next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
</the>]]></content>
      
        
        <tags>
            
            <tag> leetcode,java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[3sum]]></title>
      <url>/2017/09/22/3sum/</url>
      <content type="html"><![CDATA[<p>12345</p>
<p><excerpt in="" index="" |="" 首页摘要=""><br>+<a id="more"></a></excerpt></p>
<the rest="" of="" contents="" |="" 余下全文="">

<h1 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1.问题描述</h1><p>Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.<br>Note: The solution set must not contain duplicate triplets.<br>For example, given array S = [-1, 0, 1, 2, -1, -4],<br>A solution set is:<br>[<br>  [-1, 0, 1],<br>  [-1, -1, 2]<br>]<br>题目翻译：<br>一个给定的数组中，是否存在a,b,c满足a+b+c=0？找出这个数组中所有满足条件的三元组，同时答案中不能包含重复的情况。</p>
<h1 id="2-解题思路"><a href="#2-解题思路" class="headerlink" title="2.解题思路"></a>2.解题思路</h1><p>看到3sum问题，首先想到的是2sum问题，在解决2sum问题的时候，是使用HashMap()来寻找差值，并解决重复问题。而3sum问题内部是一个变化了的2sum问题，因为当确定了a的时候，就需要在剩下的数值中寻找b+c=-a，又变成一个寻找等于任意可能数值2sum问题了。<br>这里在解决内层2sum问题的时候，使用的类似解决water container的方法，使用两个指针指向数组的头和尾，通过判断两者想加的sum来对位置进行调整，为了避免重复，相同的数值略过处理。</p>
<h1 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</div><div class="line">        		<span class="keyword">int</span> len = nums.length;</div><div class="line">		List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</div><div class="line">    <span class="comment">//注意List&lt;&gt;是一个抽象类，它的实例化要用子类来完成。    </span></div><div class="line">		<span class="keyword">if</span>(len&lt;=<span class="number">2</span>)</div><div class="line">			<span class="keyword">return</span> res;</div><div class="line">		Arrays.sort(nums);  <span class="comment">//实现排序的类都实现了comparable接口</span></div><div class="line">		<span class="keyword">int</span> target = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len-<span class="number">2</span>;i++) &#123;</div><div class="line">			    <span class="keyword">int</span> tmp = target - nums[i];</div><div class="line">				<span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;nums[i]==nums[i-<span class="number">1</span>])<span class="comment">//处理重复问题，同时也解决了i=0的边界问题</span></div><div class="line">					<span class="keyword">continue</span>;</div><div class="line">				<span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>)<span class="comment">//当数值大于0的时候，停止寻找，因为是从负数开始查找的</span></div><div class="line">					<span class="keyword">break</span>;</div><div class="line">				<span class="keyword">int</span> l = i+<span class="number">1</span>;</div><div class="line">				<span class="keyword">int</span> r = len-<span class="number">1</span>;</div><div class="line">				<span class="keyword">while</span>(l&lt;r)&#123;</div><div class="line">					<span class="keyword">int</span> sum= nums[l]+nums[r];</div><div class="line">					<span class="keyword">if</span>(tmp==sum) &#123;</div><div class="line">						res.add(Arrays.asList(nums[i], nums[l], nums[r]));</div><div class="line">						<span class="keyword">while</span>(l&lt;r&amp;&amp;nums[l]==nums[l+<span class="number">1</span>])<span class="comment">//处理重复数值</span></div><div class="line">							l++;</div><div class="line">						<span class="keyword">while</span>(l&lt;r&amp;&amp;nums[r]==nums[r-<span class="number">1</span>])<span class="comment">//处理重复数值问</span></div><div class="line">							r--;</div><div class="line">						l++;</div><div class="line">						r--;</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">else</span> <span class="keyword">if</span>(tmp&lt;sum) &#123;</div><div class="line">						r--;</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">else</span> &#123;</div><div class="line">						l++;</div><div class="line">				    &#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> res;</div><div class="line">			</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></the>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[test]]></title>
      <url>/2017/09/22/longprefix/</url>
      <content type="html"><![CDATA[<h1 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1.问题描述</h1><p>Write a function to find the longest common prefix string amongst an array of strings.<br>题目翻译：<br>写一个函数，找到一个String数组中各个字符串的最长公共前缀。</p>
<h1 id="2-解题思路"><a href="#2-解题思路" class="headerlink" title="2.解题思路"></a>2.解题思路</h1><p>这道题的难度是easy，确实解题思路也比较直观，首先找到前两个字符串的最长公共前缀，然后再利用这个公共前缀和后面的字符串进行比对得到最长公共前缀，依次比对下去，就能得到最长的公共前缀，中间只要一步没有公共前缀，就返回空的字符串。</p>
<h1 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h1><ol>
<li><p>第一种实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> len = strs.length;</div><div class="line">        String res = <span class="string">""</span>;</div><div class="line">        <span class="keyword">if</span>(strs==<span class="keyword">null</span>||len==<span class="number">0</span>) &#123;<span class="comment">//判断是否为空</span></div><div class="line">        	<span class="keyword">return</span> res;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(len==<span class="number">1</span>)<span class="comment">//当只有一个字符串</span></div><div class="line">            <span class="keyword">return</span> strs[<span class="number">0</span>];</div><div class="line">        <span class="comment">//char[] ch1 = strs[0].toCharArray();</span></div><div class="line">        <span class="keyword">int</span> len1=<span class="number">0</span>,len2=<span class="number">0</span>;</div><div class="line">        len1 = compareStr(strs[<span class="number">0</span>],strs[<span class="number">1</span>]);<span class="comment">//首先比较最开始的两个</span></div><div class="line">        <span class="keyword">if</span>(len1==<span class="number">0</span>)</div><div class="line">        	<span class="keyword">return</span> <span class="string">""</span>;<span class="comment">//为空就返回</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">        	res = strs[<span class="number">0</span>].substring(<span class="number">0</span>, len1);<span class="comment">//注意substring的用法</span></div><div class="line">        </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len-<span class="number">1</span>;i++) &#123;</div><div class="line">        	<span class="keyword">int</span> tmp = compareStr(res,strs[i]);<span class="comment">//依次比较前缀和下一个字符串</span></div><div class="line">        	<span class="keyword">if</span>(tmp==<span class="number">0</span>)</div><div class="line">        		<span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        	<span class="keyword">else</span></div><div class="line">        		res = res.substring(<span class="number">0</span>,tmp);<span class="comment">//更新前缀</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span>  <span class="keyword">int</span> <span class="title">compareStr</span><span class="params">(String s1,String s2)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> len1 = s1.length();</div><div class="line">		<span class="keyword">int</span> len2 = s2.length();</div><div class="line">		<span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">		<span class="keyword">if</span>(len1==<span class="number">0</span>||len2==<span class="number">0</span>)</div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		 <span class="keyword">char</span>[] ch1 = s1.toCharArray();</div><div class="line">		 <span class="keyword">char</span>[] ch2=s2.toCharArray();</div><div class="line">		 </div><div class="line">		 <span class="keyword">int</span> com_len = len1&gt;len2?len2:len1;</div><div class="line">		 <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;com_len;i++) &#123;</div><div class="line">			 <span class="keyword">if</span>(ch1[i] == ch2[i])</div><div class="line">				 res++;</div><div class="line">			 <span class="keyword">else</span></div><div class="line">				 <span class="keyword">break</span>;</div><div class="line">		 &#125;</div><div class="line">		 <span class="keyword">return</span> res;<span class="comment">//返回前缀的长度</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>第二种实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestCommonPrefix</span><span class="params">(String[] strs)</span> </span></div><div class="line"><span class="function">   </span>&#123;</div><div class="line">        <span class="keyword">if</span>(strs.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        <span class="keyword">if</span>(strs.length==<span class="number">1</span>) <span class="keyword">return</span> strs[<span class="number">0</span>];</div><div class="line">        String prefix=strs[<span class="number">0</span>];<span class="comment">//初始化prefix为第一个字符串</span></div><div class="line">       </div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;strs.length;i++)</div><div class="line">        &#123;  <span class="comment">//利用循环依次判断是否存在</span></div><div class="line">            <span class="keyword">while</span>(strs[i].indexOf(prefix,<span class="number">0</span>)!=<span class="number">0</span>)</div><div class="line">            &#123;   <span class="comment">//当prefix为空的时候，就退出</span></div><div class="line">                <span class="keyword">if</span>(prefix.length()-<span class="number">1</span>&lt;=<span class="number">0</span>) &#123;</div><div class="line">                   prefix=<span class="string">""</span>;</div><div class="line">                    <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">                &#125;</div><div class="line">                    </div><div class="line">                <span class="keyword">else</span> </div><div class="line">                    prefix=prefix.substring(<span class="number">0</span>,prefix.length()-<span class="number">1</span>);</div><div class="line">            &#125;       <span class="comment">//更新前缀</span></div><div class="line">        &#125;</div><div class="line">       <span class="keyword">return</span> prefix;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> no </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/09/21/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
